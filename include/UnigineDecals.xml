<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.Decal.setMaterial(Unigine.Ptr{Unigine.Material})">
			<summary>
			Sets a new material for the decal.
			</summary> 
			<param name="mat"> Smart pointer to the material to be used for the decal. </param> 
		</member>
		<member name="M:Unigine.Decal.getMaterial const">
			<summary>
			Returns the material used for the decal.
			</summary>  
			<returns>Smart pointer to the material used for the decal.</returns>
		</member>
		<member name="M:Unigine.Decal.getMaterialInherit const">
			<summary>
			Inherits material for the decal (i.e. creates a material instance). Modifications made in a new material instance will not affect the source material.					A child material will be created only once, all subsequent calls to this method will return the first created child material.
			</summary>  
			<returns>Smart pointer to the inherited material.</returns>
		</member>
		<member name="M:Unigine.Decal.isMaterialInherited const">
			<summary>
			Returns the value indicating if a given material is inherited (instanced). Modifications made in a material instance do not affect the source material.
			</summary>  
			<returns>1 if the material is inherited successfully; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Decal.setMaxFadeDistance(float)">
			<summary>
			Updates a maximum fade-out distance, across which the decal smoothly becomes invisible due to the alpha fading. It is counted starting from the maximum visibility distance value.
			</summary> 
			<param name="distance"> A new minimum fade-out distance, in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.Decal.getMaxFadeDistance const">
			<summary>
			Returns a maximum fade-out distance, across which the decal smoothly becomes invisible due to the alpha fading. It is counted starting from the maximum visibility distance value.
			</summary>  
			<returns>Distance value, in units.</returns>
		</member>
		<member name="M:Unigine.Decal.setMaxVisibleDistance(float)">
			<summary>
			Updates the maximum visibility distance, starting at which the decal begins to fade out until becomes completely invisible.
			</summary> 
			<param name="distance"> A maximum visibility distance, in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.Decal.getMaxVisibleDistance const">
			<summary>
			Returns a maximum visibility distance, starting at which the decal begins to fade out until becomes completely invisible.
			</summary>  
			<returns>Distance value, in units.</returns>
		</member>
		<member name="M:Unigine.Decal.setMinFadeDistance(float)">
			<summary>
			Updates a minimum fade-in distance, across which the decal smoothly becomes visible due to the alpha fading. It is counted starting from the minimum visibility distance value.
			</summary> 
			<param name="distance"> A new minimum fade-in distance, in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.Decal.getMinFadeDistance const">
			<summary>
			Returns a minimum fade-in distance, across which the decal smoothly becomes visible due to the alpha fading. It is counted starting from the minimum visibility distance value.
			</summary>  
			<returns>Distance value, in units.</returns>
		</member>
		<member name="M:Unigine.Decal.setMinVisibleDistance(float)">
			<summary>
			Updates a minimum visibility distance, starting at which the decal begins to fade in and then becomes completely visible.
			</summary> 
			<param name="distance"> A new minimum visibility distance, in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.Decal.getMinVisibleDistance const">
			<summary>
			Returns the minimum visibility distance, starting at which the decal begins to fade in and then becomes completely visible.
			</summary>  
			<returns>Distance value, in units.</returns>
		</member>
		<member name="M:Unigine.Decal.setOpacity(float)">
			<summary>
			Sets opacity for the decal. This parameter enables you to control whether the decal should be opaque or semi-transparent.
			</summary> 
			<param name="opacity"> New opacity value to be set in the [0.0f; 1.0f] range (1.0f - the decal is fully opaque). </param> 
		</member>
		<member name="M:Unigine.Decal.getOpacity const">
			<summary>
			Returns the current opacity for the decal.
			</summary>  
			<returns>Current opacity value in the [0.0f; 1.0f] range (1.0f - the decal is fully opaque).</returns>
		</member>
		<member name="M:Unigine.Decal.setRadius(float)">
			<summary>
			Sets the new height of the projection box/pyramid along the Z axis.
			</summary> 
			<param name="radius"> Height of the projection box/pyramid along the Z axis, in units. </param> 
		</member>
		<member name="M:Unigine.Decal.getRadius const">
			<summary>
			Returns the current height of the projection box along the Z axis.
			</summary>  
			<returns>The height of the projection box along the Z axis, in units.</returns>
		</member>
		<member name="M:Unigine.Decal.setViewportMask(int)">
			<summary>
			Sets a bit mask for rendering a decal into the viewport. The decal is rendered, if its mask matches the camera viewport mask and the viewport mask of the decal's material.
			</summary> 
			<param name="mask"> An integer value, each bit of which is used to set a mask. </param> 
		</member>
		<member name="M:Unigine.Decal.getViewportMask const">
			<summary>
			Returns the current bit mask for rendering into the viewport. The decal is rendered, if its mask matches the camera viewport mask and the viewport mask of the decal's material.
			</summary>  
			<returns>The integer value, each bit of which is used to set a mask.</returns>
		</member>
		<member name="M:Unigine.Decal.setIntersectionMask(int)">
			<summary>
			Sets a new intersection mask for the decal. This mask can be used to cut out areas intersected by the decal from grass, mesh clutter and world clutter					(e.g. to remove grass or forest from the surface of roads projected using decals).					The areas will be cut out only if intersection masks of grass and clutter objects matches this mask (one bit at least).
			</summary> 
			<param name="mask"> Integer, each bit of which is a mask. </param> 
		</member>
		<member name="M:Unigine.Decal.getIntersectionMask const">
			<summary>
			Returns the current intersection mask of the decal. This mask can be used to cut out areas intersected by the decal from grass, mesh clutter and world clutter					(e.g. to remove grass or forest from the surface of roads projected using decals).					The areas will be cut out only if intersection masks of grass and clutter objects matches this mask (one bit at least).
			</summary>  
			<returns>Integer, each bit of which is a mask.</returns>
		</member>
		<member name="M:Unigine.Decal.isTerrainHole const">
			<summary>
			Returns a value indicating if the decal is used to create a hole in the terrain.
			</summary>  
			<returns>1 if the decal is used to create a terrain hole; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Decal.inside(Unigine.Math.vec3)">
			<summary>
			Returns a value indicating if the point with the given coordinates is inside the decal (in object-space).
			</summary> 
			<param name="p"> Point coordinates. </param> 
			<returns>1 if the point is inside the decal; otherwise, 0.</returns>
		</member>
		<member name="M:Unigine.Decal.setMaterialFilePath(char)">
			<summary>
			Sets the material for the decal by file path.
			</summary> 
			<param name="path"> Material file path. </param> 
		</member>
		<member name="M:Unigine.Decal.getMaterialFilePath const">
			<summary>
			Returns the path to the material file used for the decal.
			</summary>  
			<returns>Material file path.</returns>
		</member>
		<member name="M:Unigine.Decal.setMaterialGUID(Unigine.UGUID)">
			<summary>
			Sets the material for the decal by GUID.
			</summary> 
			<param name="materialguid"> Material GUID. </param> 
		</member>
		<member name="M:Unigine.Decal.getMaterialGUID const">
			<summary>
			Returns the GUID of the material used for the decal.
			</summary>  
			<returns>Material GUID.</returns>
		</member>
		<member name="M:Unigine.Decal.setCastBakedGlobalIllumination(bool)">
			<summary>
			Sets a value indicating if the decal is to be ignored when baking Global Illumination (lightmaps and probes). When enabled, the decal behaves the same way as surfaces with the Dynamic Lighting Mode selected: they are invisible for Voxel Probes and Environment Probes and are not baked into lightmaps.
			</summary> 
			<param name="illumination"> true to ignore the decal when baking Global Illumination (lightmaps and probes); false to bake the decal to lightmaps and probes. </param> 
		</member>
		<member name="M:Unigine.Decal.isCastBakedGlobalIllumination const">
			<summary>
			Returns a value indicating if the decal is to be ignored when baking Global Illumination (lightmaps and probes). When enabled, the decal behaves the same way as surfaces with the Dynamic Lighting Mode selected: they are invisible for Voxel Probes and Environment Probes and are not baked into lightmaps.
			</summary>  
			<returns>true if the decal is to be ignored when baking Global Illumination (lightmaps and probes); otherwise, false.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.#ctor">
			<summary>
			Constructor. Creates a new Mesh Decal.
			</summary>  
		</member>
		<member name="M:Unigine.DecalMesh.#ctor(char)">
			<summary>
			DecalMesh constructor. Creates a Mesh Decal with a source mesh loaded from the specified file.
			</summary> 
			<param name="path"> Path to the source mesh file. </param> 
		</member>
		<member name="M:Unigine.DecalMesh.setMeshPath(char)">
			<summary>
			Sets a new path to the source mesh for the current decal mesh. If the mesh is in the procedural mode, it will be reset.					The mesh should contain a single surface. In case if the mesh contains several surfaces, only the one with the 0 index will be used. Thus, the area of the decal will differ from the initial mesh.
			</summary> 
			<param name="path"> New path to the source .mesh-file to be set. </param> 
		</member>
		<member name="M:Unigine.DecalMesh.getMeshPath const">
			<summary>
			Returns the path to the source .mesh-file currently used for the decal.
			</summary>  
			<returns>Path to the source .mesh-file.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.type">
			<summary>
			Returns a DecalMesh type identifier.
			</summary>  
			<returns>Type identifier.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.getMeshCurrentRAM const">
			<summary>
								Returns the current source mesh used for the object and loaded to memory (RAM).
			</summary>  
			<returns>A current source mesh used for the object.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.getMeshCurrentVRAM">
			<summary>
			Returns the current render mesh used for the object and loaded to video memory (VRAM).
			</summary>  
			<returns>A current render mesh used for the object.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.getMeshForceRAM">
			<summary>
			Returns the source mesh used for the object and loads it to memory (RAM) immediately.
			</summary>  
			<returns>A source mesh used for the object.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.getMeshForceVRAM">
			<summary>
			Returns the render mesh used for the object and loads it to video memory (VRAM) immediately. At that, the static mesh will also be loaded to memory (RAM).					Loading to VRAM must be performed in the main thread only.
			</summary>  
			<returns>A render mesh used for the object.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.getMeshAsyncRAM">
			<summary>
			Returns the source mesh used for the object and loads it to memory (RAM) asynchronously.
			</summary>  
			<returns>A source mesh used for the object.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.getMeshAsyncVRAM">
			<summary>
			Returns the render mesh used for the object and loads it to video memory (VRAM) asynchronously. At that, the static mesh will also be loaded to memory (RAM).					Loading to VRAM must be performed in the main thread only.
			</summary>  
			<returns>A render mesh used for the object.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.getMeshDynamicRAM">
			<summary>
			Returns the procedural source mesh associated with the object and ensures it is loaded into system memory (RAM). This method is only available when the mesh is in the dynamic (PROCEDURAL_MODE_DYNAMIC) mode. A procedural mesh is a mesh created via code and uses a specific streaming mode. In PROCEDURAL_MODE_DYNAMIC, the object stays in memory after creation and is only unloaded manually using deleteDynamicMesh() or when the procedural mode is changed.
			</summary>  
			<returns>A procedural source mesh used for the object.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.getMeshDynamicVRAM">
			<summary>
			Returns the procedural render mesh associated with the object and ensures it is loaded into video memory (VRAM). This method is only available when the mesh is in the dynamic (PROCEDURAL_MODE_DYNAMIC) mode. A procedural mesh is a mesh created via code and uses a specific streaming mode. In PROCEDURAL_MODE_DYNAMIC, the object stays in memory after creation and is only unloaded manually using deleteDynamicMesh() or when the procedural mode is changed.
			</summary>  
			<returns>A procedural render mesh used for the object.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.loadAsyncVRAM">
			<summary>
			Asynchronously loads the mesh to video memory (VRAM) if the async streaming mode for meshes is enabled. Otherwise, the forced loading is performed. This method is recommended for implementing your own prefetch system (i.e. asynchronous pre-loading of meshes to video memory before they are used).					Loading to VRAM must be performed in the main thread only.
			</summary>  
			<returns>true if the mesh is loaded successfully, otherwise false. If the mesh is already loaded to VRAM, true will be returned.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.loadAsyncRAM">
			<summary>
			Asynchronously loads the mesh to memory (RAM) if the async streaming mode for meshes is enabled. Otherwise, the forced loading is performed.  This method is recommended for implementing your own prefetch system (i.e. asynchronous pre-loading of meshes to video memory before they are used).
			</summary>  
			<returns>true if the mesh is loaded successfully, otherwise false. If the mesh is already loaded to RAM, true will be returned.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.loadForceVRAM">
			<summary>
			Performs force-loading of the mesh to video memory (VRAM) immediately. The forced loading to VRAM is performed in the main thread.					Loading to VRAM must be performed in the main thread only.
			</summary>  
			<returns>true if the mesh is loaded successfully, otherwise false. If the mesh is already loaded to VRAM, true will be returned.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.loadForceRAM">
			<summary>
			Performs force-loading of the mesh to memory (RAM) immediately.
			</summary>  
			<returns>true if the mesh is loaded successfully, otherwise false. If the mesh is already loaded to RAM, true will be returned.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.setMeshProceduralMode(ObjectMeshStatic::PROCEDURAL_MODE,int)">
			<summary>
			Sets the procedural mode for the mesh. The specified mode defines how procedural data is stored, updated, and unloaded.
			</summary> 
			<param name="mode"> One of the PROCEDURAL_MODE to apply to the mesh. </param>
			<param name="mesh_render_flags"> Optional usage flags that control how vertex and index data are stored for the mesh render. </param> 
		</member>
		<member name="M:Unigine.DecalMesh.getMeshProceduralMode const">
			<summary>
			Returns a value indicating which procedural mode assigned to the mesh. The value corresponds to one of the available PROCEDURAL_MODE types, determining how procedural data is stored, updated, and unloaded.
			</summary>  
			<returns>Current procedural mode of the mesh.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.isMeshNull const">
			<summary>
			Returns a value indicating if the source mesh used for the object is null (does not exist, unassigned, not loaded, etc.).
			</summary>  
			<returns>true if the source mesh used for the object is null; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.isMeshLoadedRAM const">
			<summary>
			Returns a value indicating if the source mesh used for the object is loaded to memory (RAM).
			</summary>  
			<returns>true if the source mesh used for the object is loaded to RAM; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.isMeshLoadedVRAM const">
			<summary>
			Returns a value indicating if the source mesh used for the object is loaded to video memory (VRAM).
			</summary>  
			<returns>true if the source mesh used for the object is loaded to VRAM; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.getStatDrawCalls const">
			<summary>
			Returns the number of draw calls (DIP) for the decal during the last frame.
			</summary>  
			<returns>Number of draw calls (DIP) for the decal during the last frame.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.getStatDrawCountViewport const">
			<summary>
			Returns the number of times the decal was drawn in the viewport last frame.
			</summary>  
			<returns>Number of times the decal was drawn in the viewport last frame.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.getStatDrawCountReflection const">
			<summary>
			Returns the number of times the decal was drawn during reflections rendering in the last frame.
			</summary>  
			<returns>Number of times the decal was drawn during rendering in the last frame.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.getStatDrawCountShadow const">
			<summary>
			Returns the number of times the decal was drawn during shadows rendering in the last frame.
			</summary>  
			<returns>Number of times the decal was drawn during shadows rendering in the last frame.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.getStatFrame const">
			<summary>
			Returns the number of Engine frame, in which the decal was drawn last time.
			</summary>  
			<returns>Number of frame, in which the decal was drawn last time.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.createCopyMeshRAM const">
			<summary>
			Creates and returns a copy of the source mesh used by the object, loading it directly from disk if it is not present in cache. This method does not stream the copied mesh into memory cache, resulting in lower RAM usage.
			</summary>  
			<returns>A copy of the source mesh, or nullptr if source mesh is not presented in RAM or its file path is invalid.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.getCopyMeshRAM(Unigine.Ptr{Unigine.Mesh}) const">
			<summary>
			Retrieves a copy of the source mesh used by the object and writes it to the provided mesh object. If the mesh is not present in cache, it is loaded directly from disk. This method does not stream the copied mesh into memory cache, resulting in lower RAM usage.
			</summary> 
			<param name="result"> Object that will receive a copy of the source mesh. </param> 
			<returns>true if the mesh was copied successfully, false if source mesh is not present in RAM or its file path is invalid.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.isMeshProceduralDone const">
			<summary>
			Returns a value indicating if all asynchronous operations on the procedural mesh have completed.
			</summary>  
			<returns>true if no asynchronous geometry operation is active, otherwise false.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.isMeshProceduralActive const">
			<summary>
			Returns a value indicating if an asynchronous operation on the procedural mesh is currently in progress.
			</summary>  
			<returns>true if an asynchronous geometry operation is active, otherwise false.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.isMeshProceduralDynamic const">
			<summary>
			Returns a value indicating if the current procedural mode is PROCEDURAL_MODE_DYNAMIC.
			</summary>  
			<returns>true if PROCEDURAL_MODE_DYNAMIC is active, otherwise false.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.applyCopyMeshProceduralForce(Unigine.Ptr{ConstMesh},int)">
			<summary>
								Copies all vertex data from the given mesh into the object's procedural mesh forcibly, executing the operation immediately. Works only when procedural mode is enabled.
			</summary> 
			<param name="mesh"> Source mesh to copy vertex data from. </param>
			<param name="mesh_render_flags"> Optional usage flags for MeshRender. </param> 
			<returns>true if the mesh was copied successfully, otherwise false.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.applyMoveMeshProceduralForce(Unigine.Ptr{Unigine.Mesh},int)">
			<summary>
								Moves all vertex data from the given mesh into the object's procedural mesh forcibly, executing the operation immediately without memory allocation and data copying (move semantics). Works only when procedural mode is enabled.					In PROCEDURAL_MODE_DYNAMIC, this method behaves identically to its asynchronous variant.
			</summary> 
			<param name="mesh"> Source mesh to move vertex data from. </param>
			<param name="mesh_render_flags"> Optional usage flags for MeshRender. </param> 
			<returns>true if the mesh was moved (transferred without copying) successfully, otherwise false.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.applyMoveMeshProceduralForce(Unigine.Ptr{Unigine.Mesh},Unigine.Ptr{MeshRender})">
			<summary>
								Moves all vertex and render data from the given mesh_ram and mesh_vram into the object's procedural mesh forcibly, executing the operation immediately using move semantics, without data copying or VRAM allocation. Works only when procedural mode is enabled.
			</summary> 
			<param name="mesh_ram"> Source mesh containing vertex data. </param>
			<param name="mesh_vram"> Source mesh containing render data. </param> 
			<returns>true if the data was moved (transferred without copying) successfully, otherwise false.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.applyCopyMeshProceduralAsync(Unigine.Ptr{ConstMesh},int)">
			<summary>
								Copies all vertex data from the given mesh into the object's procedural mesh asynchronously. The operation is not forced and is executed in the background with no noticeable delay. Works only when procedural mode is enabled.					In PROCEDURAL_MODE_FILE and PROCEDURAL_MODE_BLOB, this method performs faster compared to the forced variant, as file writes and memory operations are offloaded to background threads.
			</summary> 
			<param name="mesh"> Source mesh to copy vertex data from. </param>
			<param name="mesh_render_flags"> Optional usage flags for MeshRender. </param> 
			<returns>true if the mesh was copied successfully, otherwise false.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.applyMoveMeshProceduralAsync(Unigine.Ptr{Unigine.Mesh},int)">
			<summary>
								Moves all vertex data from the given mesh into the object's procedural mesh asynchronously. The operation is not forced and is executed in the background with no noticeable delay, without memory allocation and data copying (move semantics). Works only when procedural mode is enabled.					In PROCEDURAL_MODE_FILE and PROCEDURAL_MODE_BLOB, this method performs faster compared to the forced variant, as file writes and memory operations are offloaded to background threads.
			</summary> 
			<param name="mesh"> Source mesh to copy vertex data from. </param>
			<param name="mesh_render_flags"> Optional usage flags for MeshRender. </param> 
		</member>
		<member name="M:Unigine.DecalMesh.applyMoveMeshProceduralAsync(Unigine.Ptr{Unigine.Mesh},Unigine.Ptr{MeshRender})">
			<summary>
								Moves all vertex and render data from the given mesh_ram and mesh_vram into the object's procedural mesh asynchronously, without copying or allocating VRAM. The operation is not forced and is executed in the background with no noticeable delay. Works only when procedural mode is enabled.					In PROCEDURAL_MODE_FILE and PROCEDURAL_MODE_BLOB, this method performs faster, as file writes and memory operations are offloaded to background threads.					In PROCEDURAL_MODE_DYNAMIC, this method behaves identically to its forced variant.
			</summary> 
			<param name="mesh_ram"> Source mesh containing vertex data. </param>
			<param name="mesh_vram"> Source mesh containing render data. </param> 
			<returns>true if the data was moved successfully, otherwise false.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.deleteDynamicMesh">
			<summary>
								Releases all memory used by the procedural mesh, including both VRAM and RAM. Works only when procedural mode is set to PROCEDURAL_MODE_DYNAMIC.
			</summary>  
			<returns>true if the memory was released successfully, otherwise false.</returns>
		</member>
		<member name="M:Unigine.DecalMesh.runGenerateMeshProceduralAsync(Unigine.CallbackBase1{Unigine.Ptr{Unigine.Mesh}},int)">
			<summary>
								Starts asynchronous generation of procedural mesh data. The callback_generate function is executed in a background thread and must create and fill a mesh object with new data. The generated mesh will be transferred to the object once complete, without blocking the main thread. Works only when procedural mode is enabled.					Note that the callback is executed in a single dedicated thread controlled by the engine, it is not parallelized and must not spawn additional threads.
			</summary> 
			<param name="callback_generate"> Callback function responsible for creating and filling the source mesh. Executed in the main thread.The function must be wrapped using MakeCallback() and have the following signature:void callback_generate(Ptr&amp;lt;Mesh&amp;gt; mesh) </param>
			<param name="mesh_render_flags"> Optional usage flags for MeshRender. </param> 
			<returns>true if the modification was completed and applied successfully, otherwise false</returns>
		</member>
		<member name="M:Unigine.DecalMesh.runGenerateMeshProceduralAsync(Unigine.CallbackBase1{Unigine.Ptr{Unigine.Mesh}},Unigine.CallbackBase,int)">
			<summary>
								Starts asynchronous generation of procedural mesh data. The callback_generate function is executed in a background thread and must create and fill a mesh object with new data. The generated mesh will be transferred to the object once complete, without blocking the main thread. After the mesh has been applied to the object, the optional callback_done will be called. Works only when procedural mode is enabled.					Note that the callback is executed in a single dedicated thread controlled by the engine, it is not parallelized and must not spawn additional threads.
			</summary> 
			<param name="callback_generate"> Callback function responsible for creating and filling the source mesh. Executed in the main thread.The function must be wrapped using MakeCallback() and have the following signature:void callback_generate(Ptr&amp;lt;Mesh&amp;gt; mesh) </param>
			<param name="callback_done"> Optional callback executed after geometry has been fully applied.The function must be wrapped using MakeCallback() and have the following signature:void callback_done() </param>
			<param name="mesh_render_flags"> Optional usage flags for MeshRender. </param> 
			<returns>true if the generation was completed and applied successfully, otherwise false</returns>
		</member>
		<member name="M:Unigine.DecalMesh.runGenerateMeshProceduralForce(Unigine.CallbackBase1{Unigine.Ptr{Unigine.Mesh}},int)">
			<summary>
								Starts immediate (forced) generation of procedural mesh data. The callback_generate function is executed in the main thread and must create and fill a mesh object with new data. The generated mesh is applied to the object as soon as generation completes. Works only when procedural mode is enabled.
			</summary> 
			<param name="callback_generate"> Callback function responsible for creating and filling the source mesh. Executed in the main thread.The function must be wrapped using MakeCallback() and have the following signature:void callback_generate(Ptr&amp;lt;Mesh&amp;gt; mesh) </param>
			<param name="mesh_render_flags"> Optional usage flags for MeshRender. </param> 
			<returns>true if the generation was completed and applied successfully, otherwise false</returns>
		</member>
		<member name="M:Unigine.DecalMesh.runGenerateMeshProceduralForce(Unigine.CallbackBase1{Unigine.Ptr{Unigine.Mesh}},Unigine.CallbackBase,int)">
			<summary>
								Starts immediate (forced) generation of procedural mesh data. The callback_generate function is executed in the main thread and must create and fill a Mesh object with vertex data. Once the mesh is applied to the object, the optional callback_done is called on the main thread. Works only when procedural mode is enabled.
			</summary> 
			<param name="callback_generate"> Callback function responsible for creating and filling the source mesh. Executed in the main thread.The function must be wrapped using MakeCallback() and have the following signature:void callback_generate(Ptr&amp;lt;Mesh&amp;gt; mesh) </param>
			<param name="callback_done"> Optional callback executed after geometry has been fully applied.The function must be wrapped using MakeCallback() and have the following signature:void callback_done() </param>
			<param name="mesh_render_flags"> Optional usage flags for MeshRender. </param> 
			<returns>true if the generation was completed and applied successfully, otherwise false</returns>
		</member>
		<member name="M:Unigine.DecalOrtho.#ctor">
			<summary>
			Constructor. Creates a new orthographic decal with default parameters.
			</summary>  
		</member>
		<member name="M:Unigine.DecalOrtho.setHeight(float)">
			<summary>
			Sets a new length of the projection box along the Y axis.
			</summary> 
			<param name="height"> The length of the projection box along the Y axis, in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.DecalOrtho.getHeight const">
			<summary>
			Returns the current length of the projection box along the Y axis.
			</summary>  
			<returns>The length of the projection box along the Y axis, in units.</returns>
		</member>
		<member name="M:Unigine.DecalOrtho.getProjection const">
			<summary>
			Returns the projection matrix.
			</summary>  
			<returns>The projection matrix of the decal.</returns>
		</member>
		<member name="M:Unigine.DecalOrtho.setWidth(float)">
			<summary>
			Sets the new length of the projection box along the X axis.
			</summary> 
			<param name="width"> The length of the projection box along the X axis, in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.DecalOrtho.getWidth const">
			<summary>
			Returns the current length of the projection box along the X axis, in units.
			</summary>  
			<returns>The length of the projection box along the X axis, in units.</returns>
		</member>
		<member name="M:Unigine.DecalOrtho.setZNear(float)">
			<summary>
			Sets a new value of the near clipping plane.
			</summary> 
			<param name="znear"> A value of the near clipping plane, ranging from 0 to 1. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.DecalOrtho.getZNear const">
			<summary>
			Returns the value of the near clipping plane.
			</summary>  
			<returns>The value of the near clipping plane, ranging from 0 to 1.</returns>
		</member>
		<member name="M:Unigine.DecalOrtho.type">
			<summary>
			Returns a type identifier.
			</summary>  
			<returns>Type identifier.</returns>
		</member>
		<member name="M:Unigine.DecalProj.#ctor">
			<summary>
			Constructor. Creates a new projected decal with default parameters.
			</summary>  
		</member>
		<member name="M:Unigine.DecalProj.setAspect(float)">
			<summary>
			Sets the new aspect ratio of the decal, in units.
			</summary> 
			<param name="aspect"> The aspect ratio of the decal, in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.DecalProj.getAspect const">
			<summary>
			Returns the current aspect ratio of the decal.
			</summary>  
			<returns>The aspect ratio of the decal, in units.</returns>
		</member>
		<member name="M:Unigine.DecalProj.setFov(float)">
			<summary>
			Sets a new field of view of the decal's projector.
			</summary> 
			<param name="fov"> A field of view of the decal's projector, in degrees. The provided value will be clamped in the range [1;90]. </param> 
		</member>
		<member name="M:Unigine.DecalProj.getFov const">
			<summary>
			Returns the current field of view of the decal's projector.
			</summary>  
			<returns>The field of view of the decal's projector, in degrees.</returns>
		</member>
		<member name="M:Unigine.DecalProj.getProjection const">
			<summary>
			Returns the projection matrix.
			</summary>  
			<returns>The projection matrix of the decal.</returns>
		</member>
		<member name="M:Unigine.DecalProj.setZNear(float)">
			<summary>
			Sets a distance to the near clipping plane of the decal.
			</summary> 
			<param name="znear"> A new distance to the near clipping plane, in units. If a negative value is provided, 0 will be used instead. </param> 
		</member>
		<member name="M:Unigine.DecalProj.getZNear const">
			<summary>
			Returns the distance to the near clipping plane of the decal.
			</summary>  
			<returns>The distance to the near clipping plane, in units.</returns>
		</member>
		<member name="M:Unigine.DecalProj.type">
			<summary>
			Returns the type of the node.
			</summary>  
			<returns>Decal type identifier.</returns>
		</member>
	</members>
</doc>