<?xml version='1.0'?>
<doc>
	<assembly>
		<name>Unigine</name>
	</assembly>
	<members>
		<member name="M:Unigine.PackageUng.#ctor(char,char)">
			<summary>
			Constructor. Initializes a PackageUng object with an optional password and a specified list for the expressions to be compressed. By default, the list includes formats that do not require Data Streaming.
			</summary> 
			<param name="password"> Password used to protect the archive. If empty, no password protection is applied. </param>
			<param name="compress_extension_list"> A space-separated list of file extensions that should be compressed when added to the package. </param> 
		</member>
		<member name="M:Unigine.PackageUng.close">
			<summary>
			Closes the currently opened package and resets internal state of PackageUng object.
			</summary>  
		</member>
		<member name="M:Unigine.PackageUng.createPackage(char)">
			<summary>
			Creates a new UNG package file at the specified path.
			</summary> 
			<param name="path"> Package path. </param> 
			<returns>true if a package was created successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.PackageUng.isSupported">
			<summary>
			Returns a value indicating if UNG-packages are supported.
			</summary>  
			<returns>true if UNG packages are supported; otherwise, false.UNG-packages are not supported in evaluation version.</returns>
		</member>
		<member name="M:Unigine.PackageUng.load(char)">
			<summary>
			Loads an existing package from the specified path.
			</summary> 
			<param name="path"> The path to the package file. </param> 
			<returns>true if a package was loaded successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.PackageUng.readFile(unsignedchar,size_t)">
			<summary>
			Reads the contents of the currently selected file and puts it into the data array.					This operation is performed for a currently selected file. To select a file use selectFile().
			</summary> 
			<param name="data"> Data array. </param>
			<param name="size"> File size, in bytes. </param> 
			<returns>true if a file was read successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.PackageUng.selectFile(char,size_t)">
			<summary>
			Selects a file with a given path as a current one and puts its size in the provided variable.
			</summary> 
			<param name="path"> Relative path of the file within the package. </param>
			<param name="size"> A reference variable to store the size of the selected file. </param> 
			<returns>true if a file was selected successfully; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.PackageUng.writeFile(char,unsignedchar,size_t)">
			<summary>
			Writes data to the package with a given path.
			</summary> 
			<param name="path"> File path. </param>
			<param name="data"> Data to be written. </param>
			<param name="size"> Size of the data to be written, in bytes. </param> 
			<returns>true if the data was successfully written to a file; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.PackageUng.containsFile(char) const">
			<summary>
			Checks if the package contains the specified file.
			</summary> 
			<param name="path"> File path. </param> 
			<returns>true if the package contains the specified file; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.PackageUng.findFile(char) const">
			<summary>
			Returns the file ID in the package by its path.
			</summary> 
			<param name="path"> File path. </param> 
			<returns>File ID. A number between 0 and the total number of files in the package, or -1, if the file doesn't exist.</returns>
		</member>
		<member name="M:Unigine.PackageUng.getFileSize(int) const">
			<summary>
			Returns the size of the file at the specified index within the package.
			</summary> 
			<param name="num"> Index of the file in the package. </param> 
			<returns>Size of the file in bytes.</returns>
		</member>
		<member name="M:Unigine.PackageUng.getFilePath(int)">
			<summary>
			Returns the path of the file at the specified index.
			</summary> 
			<param name="num"> Index of the file in the package. </param> 
			<returns>A string representing the path of the file.</returns>
		</member>
		<member name="M:Unigine.PackageUng.getFileCompressedSize(int) const">
			<summary>
			Returns the compressed size of the file at the specified index. Compression is applied only to files with extensions included in the compression list specified in the constructor.
			</summary> 
			<param name="num"> Index of the file in the package. </param> 
			<returns>The size of the file in its compressed form, in bytes.</returns>
		</member>
		<member name="M:Unigine.PackageUng.isFileCompressed(int) const">
			<summary>
			Checks whether the file at specified index is stored in compressed form within the package. Compression is applied only to files with extensions included in the compression list specified in the constructor.
			</summary> 
			<param name="num"> Index of the file in the package. </param> 
			<returns>true if the specified file is compressed; otherwise, false.</returns>
		</member>
		<member name="M:Unigine.PackageUng.getNumCompressExtensions const">
			<summary>
			Returns the number of file extensions currently included in the compression list. The compression list is specified when the PackageUng object is constructed.
			</summary>  
			<returns>Number of file extensions in the compression list.</returns>
		</member>
		<member name="M:Unigine.PackageUng.getCompressExtension(int) const">
			<summary>
			Retrieves a file extension from the compression list by it's index. The compression list is specified when the PackageUng object is constructed.
			</summary> 
			<param name="num"> Index of the extension in the compression list. </param> 
			<returns>The file extension at the given index.</returns>
		</member>
		<member name="M:Unigine.PackageUng.isCompressExtension(char) const">
			<summary>
			Checks whether the specified file extension is in the compression list. The compression list is specified when the PackageUng object is constructed.
			</summary> 
			<param name="ext"> The file extension to check (without a leading dot). </param> 
			<returns>true if the specified extension is in compression list; otherwise, false.</returns>
		</member>
	</members>
</doc>